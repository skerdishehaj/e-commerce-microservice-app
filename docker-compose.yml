services:

  postgres-order:
    container_name: ms_pg_sql_order
    image: postgres
    environment:
      POSTGRES_USER: skerdi
      POSTGRES_PASSWORD: skerdi
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - postgres-order:/var/lib/postgresql/data
    ports:
      - 7777:5432
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-payment:
    container_name: ms_pg_sql_payment
    image: postgres
    environment:
      POSTGRES_USER: skerdi
      POSTGRES_PASSWORD: skerdi
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - postgres-payment:/var/lib/postgresql/data
    ports:
      - 7778:5432
    networks:
      - microservices-net
    restart: unless-stopped

  postgres-product:
    container_name: ms_pg_sql_product
    image: postgres
    environment:
      POSTGRES_USER: skerdi
      POSTGRES_PASSWORD: skerdi
      PG_DATA: /var/lib/postgresql/data
    volumes:
      - postgres-product:/var/lib/postgresql/data
    ports:
      - 7779:5432
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb-notification:
    container_name: ms_mongo_db_notification
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: skerdi
      MONGO_INITDB_ROOT_PASSWORD: skerdi
    volumes:
      - mongodb-notification:/data
    ports:
      - 27017:27017
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb-customer:
    container_name: ms_mongo_db_customer
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: skerdi
      MONGO_INITDB_ROOT_PASSWORD: skerdi
    volumes:
      - mongodb-customer:/data
    ports:
      - 27018:27017
    networks:
      - microservices-net
    restart: unless-stopped

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 7776:1080 # Web UI
      - 7775:1025 # SMTP server
    networks:
      - microservices-net
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - microservices-net
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    networks:
      - microservices-net

  # zipkin
  #  zipkin:
  #    image: openzipkin/zipkin
  #    container_name: ms_zipkin
  #    ports:
  #      - 9411:9411
  #    networks:
  #      - microservices-net

  # keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.2
    container_name: ms_keycloak
    ports:
      - 9098:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    networks:
      - microservices-net
    command:
      - "start-dev"

  # Loki
  loki:
    image: grafana/loki:main
    command: [ '-config.file=/etc/loki/local-config.yaml' ]
    ports:
      - '3100:3100'
    networks:
      - microservices-net

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.46.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'
    networks:
      - microservices-net

  # Tempo
  tempo:
    image: grafana/tempo:2.2.2
    command: [ '-config.file=/etc/tempo.yaml' ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - '3110:3100' # Tempo
      - '9411:9411' # zipkin
    networks:
      - microservices-net

  # Grafana
  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - '3000:3000'
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres-order:
  postgres-payment:
  postgres-product:
  mongodb-notification:
  mongodb-customer:
